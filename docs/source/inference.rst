###################
 JoliGEN Inference
###################

JoliGEN reads the model configuration from a generated
``train_config.json`` file that is stored in the model directory. When
loading a previously trained model, make sure the the
``train_config.json`` file is in the directory.

Python scripts are provided for inference, that can be used as a
baseline for using a model in another codebase.

**********************************************
 Generate an image with a GAN generator model
**********************************************

If you followed the :doc:`Quickstart GAN <quickstart_gan>`, you can
skip the two first steps (get data and model) and use your own pretrained model.

Download data
=============

Download the dataset:

.. code:: bash

   wget https://www.joligen.com/datasets/noglasses2glasses_ffhq.zip
   unzip noglasses2glasses_ffhq.zip
   mkdir datasets
   mv noglasses2glasses_ffhq datasets/noglasses2glasses_ffhq
   rm noglasses2glasses_ffhq.zip

Download a pretrained glasses removal model
===========================================

Download a pretrained model:

.. code:: bash

   wget https://joligen.com/models/joligen_model_gan_glasses2noglasses.zip
   unzip joligen_model_gan_glasses2noglasses.zip
   mkdir checkpoints
   mv glasses2noglasses/ ./checkpoints/
   rm joligen_model_gan_glasses2noglasses.zip

Run the inference script
========================

.. code:: bash

   cd scripts
   python3 gen_single_image.py --model-in-file ../checkpoints/glasses2noglasses/latest_net_G_A.pth --img-in ../datasets/noglasses2glasses_ffhq/trainB/img/00005.jpg --img-out target.jpg

The output file is the ``target.jpg`` image in the current directory:

.. list-table:: gan inference script image output
   :class: borderless

   -  -  .. image:: _static/gan_glasses2noglasses_orig_image.jpg
           :width: 128
      -  .. image:: _static/gan_glasses2noglasses_output.jpg

   -  -  original image given as input to the model
      -  ``target.jpg``: the output image with the glasses removed

******************************************
 Generate an image with a diffusion model
******************************************

If you followed the :doc:`Quickstart DDPM <quickstart_ddpm>`, you can
skip the two first steps (get data and model) and use your own pretrained model.

Download data
=============

Download the dataset:

.. code:: bash

   wget https://www.joligen.com/datasets/noglasses2glasses_ffhq.zip
   unzip noglasses2glasses_ffhq.zip
   mkdir datasets
   mv noglasses2glasses_ffhq datasets/noglasses2glasses_ffhq
   rm noglasses2glasses_ffhq.zip

Download a pretrained glasses insertion model
=============================================

Download a pretrained model:

.. code:: bash

   wget https://joligen.com/models/joligen_model_ddpm_noglasses2glasses.zip
   unzip joligen_model_ddpm_noglasses2glasses.zip
   mkdir checkpoints
   mv noglasses2glasses/ ./checkpoints/
   rm joligen_model_ddpm_noglasses2glasses.zip

Run the inference script
========================

.. code:: bash

   mkdir noglasses2glasses_inference_output
   cd scripts/
   python3 gen_single_image_diffusion.py --model-in-file ../checkpoints/noglasses2glasses/latest_net_G_A.pth --img-in ../datasets/noglasses2glasses_ffhq/trainA/img/00002.jpg --mask-in ../datasets/noglasses2glasses_ffhq/trainA/bbox/00002.jpg --dir-out ../noglasses2glasses_inference_output --img-width 128 --img-height 128

The output files will be in the ``noglasses2glasses_inference_output``
folder, with:

.. list-table:: diffusion inference script images output
   :class: borderless

   -  -  .. image:: _static/noglasses2glasses_ddpm_cond.png
      -  .. image:: _static/noglasses2glasses_ddpm_generated.png
      -  .. image:: _static/noglasses2glasses_ddpm_generated_crop.png
      -  .. image:: _static/noglasses2glasses_ddpm_mask.png
      -  .. image:: _static/noglasses2glasses_ddpm_orig.png
      -  .. image:: _static/noglasses2glasses_ddpm_y_0.png
      -  .. image:: _static/noglasses2glasses_ddpm_y_t.png

   -  -  ``img_0_cond.png``: the conditionning image given to the model

      -  ``img_0_generated.png``: the reconstructed output image, *i.e.*
         the generated crop inserted inside the original image

      -  ``img_0_generated_crop.png``: the crop generated by the model.
         If the image size is the same as the crop size, this image is
         the same as ``img_0_generated.png``, otherwise it is a crop
         around the mask

      -  ``img_0_mask.png``: The mask given to the model

      -  ``img_0_orig.png``: the original image

      -  ``img_0_y_0.png``: the original image resized

      -  ``img_0_y_t.png``: the noisy image given to the model
